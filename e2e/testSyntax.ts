let x1:string = '1';//строка
let x2:number = 1;//число
//ну и тд, кроме пары особенностей
//x1=1;-ошибка, тк обязательна должны быть строка
let x3:any = 1;
x3='1';// -тип any
let x4 =`${x1}`; // шаблоны строк
let x5:string[] = ['1','2']; //массивы
let x6:Array<string> = ['1','2']; // -тоже массивы
let x7:string | number; // union-любой из этих типов
typeof x1 === 'string';//type guard-защита типов(проверка типа)
type stringOrNumver = string | number; // псевдонимы типов
x2= (<string>x1).length;// приведение типов(можно с помощью as)
//определенеи функции(пример через переменную)
let add = function(a:number, b?:number, ...numberArray: number[]):number { //number после скобки-возвращаемый тип, b - необязательный параметр
    return a+b;
};
let result = add(1,2);
let colors:{//-обьект-свойство
   car:string;
   lol:string;
};
//Привязка
// 1) {{peremen}} -привязка элемента DOM к значению компонента(интерполяция)
// 2) [value]='name' -привязка к свойства элемента DOM к значению компонента
// 3) (click) -событие
// 4) двусторонняя привязка- [(ngModel)]= "name"-элемент DOM привязан к значению на компоненте, при этом изменение на одном конце привязки сразу приводят к изменению на другой

